<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Record Of March 13th</title>
    <link href="/2023/03/13/Record-Of-March-13th/"/>
    <url>/2023/03/13/Record-Of-March-13th/</url>
    
    <content type="html"><![CDATA[<h1 id="Task-Today"><a href="#Task-Today" class="headerlink" title="Task Today"></a>Task Today</h1><ol><li>Create account of coding platform of Tencent;</li><li>Run a jeecg framework;</li><li>Free to add anything you want on VUE to show the effect of display;</li><li>Learn tags of HTML;</li><li>Know what Anti Design Vue includes.</li></ol><h1 id="Make-versions-of-node-interchangeable-to-fit-different-business"><a href="#Make-versions-of-node-interchangeable-to-fit-different-business" class="headerlink" title="Make versions of node interchangeable to fit different business"></a>Make versions of node interchangeable to fit different business</h1><p>Uninstall node if you used pkg to install before</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">sudo rm <span class="hljs-operator">-</span>rf <span class="hljs-operator">/</span>usr<span class="hljs-operator">/</span><span class="hljs-keyword">local</span><span class="hljs-operator">/</span>&#123;bin<span class="hljs-operator">/</span>&#123;node,npm&#125;,lib<span class="hljs-operator">/</span>node_modules<span class="hljs-operator">/</span>npm,lib<span class="hljs-operator">/</span>node,share<span class="hljs-operator">/</span>man<span class="hljs-comment">/*/node.*&#125;</span><br></code></pre></td></tr></table></figure><p><img src="1678689971726-bb360134-13b8-401e-8462-7f19c71c9ebe.png" alt="img"></p><p>Then install nvm through brew</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">brew install nvm<br></code></pre></td></tr></table></figure><p>Set local path to  ~/.zshrc then resource it</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">Add</span> the following <span class="hljs-keyword">to</span> <span class="hljs-operator">~</span><span class="hljs-operator">/</span>.zshrc <span class="hljs-keyword">or</span> your desired shell<br>configuration file:<br><br>  export NVM_DIR<span class="hljs-operator">=</span>&quot;$HOME/.nvm&quot;<br>  [ <span class="hljs-operator">-</span>s &quot;/opt/homebrew/opt/nvm/nvm.sh&quot; ] <span class="hljs-operator">&amp;&amp;</span> \. &quot;/opt/homebrew/opt/nvm/nvm.sh&quot;  # This loads nvm<br>  [ <span class="hljs-operator">-</span>s &quot;/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm&quot; ] <span class="hljs-operator">&amp;&amp;</span> \. &quot;/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm&quot;  # This loads nvm bash_completion<br>source <span class="hljs-operator">~</span><span class="hljs-operator">/</span>.zshrc<br><br><span class="hljs-keyword">check</span>  version <span class="hljs-keyword">of</span> nvm<br>nvm <span class="hljs-operator">-</span>v <br></code></pre></td></tr></table></figure><p>Begin to install node</p><p>Check available version we can use at present</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">nvm list available<br></code></pre></td></tr></table></figure><p>Install appointed version if you like ,here we recommend to install v12.20.1 or whatever you prefer</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql">nvm install <span class="hljs-number">12.20</span><span class="hljs-number">.1</span><br><br>nvm use <span class="hljs-comment">--delete-prefix v12.20.1</span><br><br>nvm use <span class="hljs-number">12.20</span><span class="hljs-number">.1</span><br><br># <span class="hljs-keyword">set</span> <span class="hljs-keyword">default</span> version<br>nvm alias <span class="hljs-keyword">default</span> <span class="hljs-number">12.20</span><span class="hljs-number">.1</span><br><br># <span class="hljs-keyword">check</span> if node <span class="hljs-keyword">is</span> successfully installed<br><br>node <span class="hljs-operator">-</span>v<br><br>npm <span class="hljs-operator">-</span>v<br></code></pre></td></tr></table></figure><p>Sometimes it is necessary to restart system to make it into effect~Just drink a java to wait.</p><p>有时候抽风需要重启一下~~~~</p><p>重装node，用nvm 来管理node版本</p><hr><h1 id="About-VUE"><a href="#About-VUE" class="headerlink" title="About VUE"></a>About VUE</h1><ol><li>tag <template>  only allows one same name tag at same level.  template的同级元素只有一个</li><li>vue.config.js: define port and proxy address;if port is oppupied, it will increase by 1 automatically;</li><li>package.json: define operation to run with npm command ,rules ,verisions of depencies and others….</li><li>package-lock.json：is same as .ignore file of git; 锁定版本和校验，一般忽略</li></ol><h1 id="About-Ant"><a href="#About-Ant" class="headerlink" title="About Ant"></a>About Ant</h1><p><a href="https://2x.antdv.com/components/overview-cn/">https://2x.antdv.com/components/overview-cn/</a></p><p>github:<a href="https://github.com/vueComponent/ant-design-vue">https://github.com/vueComponent/ant-design-vue</a></p><h1 id="Tutorial-Web"><a href="#Tutorial-Web" class="headerlink" title="Tutorial Web"></a>Tutorial Web</h1><p><a href="http://books.createhoto.com/">http://books.createhoto.com/</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTML">https://developer.mozilla.org/en-US/docs/Web/HTML</a></p><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><ol><li>Rebuild a jeecg project from coding platform with VUE2;</li><li>Get the method to change versions of VUE easily;</li><li>Get to know some links to learn front-end;</li><li>More familiar with VUE;</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Front-End</tag>
      
      <tag>VUE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Quick Start A JEECG DEMO</title>
    <link href="/2023/03/10/Quick_Start_A_JEECG_DEMO/"/>
    <url>/2023/03/10/Quick_Start_A_JEECG_DEMO/</url>
    
    <content type="html"><![CDATA[<h1 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h1><p>Possible to get an opportunity to learn front-end in company, I receievd a primary demand from a professor.</p><p><img src="1678436943916-10377638-ff2b-4fd0-bf9b-5624459098c3.png" alt="img"></p><h2 id="Code-Source"><a href="#Code-Source" class="headerlink" title="Code Source"></a>Code Source</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">https://github.com/jeecgboot/jeecg-boot<br></code></pre></td></tr></table></figure><h2 id="BACKEND-PART"><a href="#BACKEND-PART" class="headerlink" title="BACKEND PART"></a>BACKEND PART</h2><p>Pull backend codes from github</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/jeecgboot/jeecg-boot.git<br></code></pre></td></tr></table></figure><p>How To Start VIA IDEA followed by the document.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">http://doc.jeecg.com/2043874<br></code></pre></td></tr></table></figure><p>Initial DB</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">jeecg-boot/db/jeecgboot-mysql-5.7.sql<br></code></pre></td></tr></table></figure><p>Then execute SQL file to build the DB in your laptop.</p><p><img src="1678436196678-4df668fb-715a-4a37-a003-879ffd3a1292.png" alt="img"></p><p>Follow below path to update your local MySQL&amp;Redis</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">jeecg-module-system/jeecg-system-start/src/main/resources/application-dev.yml<br></code></pre></td></tr></table></figure><p>Finally, we can run back end.</p><h2 id="FRONT-END-PART（VUE3）"><a href="#FRONT-END-PART（VUE3）" class="headerlink" title="FRONT-END PART（VUE3）"></a>FRONT-END PART（VUE3）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/jeecgboot/jeecgboot-vue3<br><br>npm install --force  //if necessary in case depencies conflict<br><br>npm run dev<br></code></pre></td></tr></table></figure><p>Install pmmp command through nmp</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g pnpm<br><br>pnpm run<br><br>pnpm dev<br></code></pre></td></tr></table></figure><p>What is pnpm? And how to install pnpm</p><p><a href="https://juejin.cn/post/7124142007659790372">https://juejin.cn/post/7124142007659790372</a></p><h2 id="Trouble-Shooting"><a href="#Trouble-Shooting" class="headerlink" title="Trouble Shooting"></a>Trouble Shooting</h2><p>Depencies conflicts while using npm command to install</p><p><a href="https://blog.csdn.net/qq_36521981/article/details/124704628">https://blog.csdn.net/qq_36521981/article/details/124704628</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL - Execution Flow &amp; Architecture</title>
    <link href="/2022/11/22/MySQL-Execution-Flow-Architecture/"/>
    <url>/2022/11/22/MySQL-Execution-Flow-Architecture/</url>
    
    <content type="html"><![CDATA[<p>This article mainly records that how a query sql works, MySQL Architecture and Layers.Here is the flow chart.</p><p><img src="1668591518821-973d9ec3-03c1-44a2-a23d-c42221408b16.png" alt="Flow Chart"></p><p><img src="1669108141790-c79688f6-8c38-45f5-b2b6-40b7a4ef8daa.png" alt="Architecture"></p><hr><h4 id="视频版本选择–5-7-x"><a href="#视频版本选择–5-7-x" class="headerlink" title="视频版本选择–5.7.x"></a>视频版本选择–5.7.x</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> version();  <span class="hljs-comment">-- you can see the version</span><br></code></pre></td></tr></table></figure><hr><h4 id="MySQL-通信协议"><a href="#MySQL-通信协议" class="headerlink" title="MySQL 通信协议"></a>MySQL 通信协议</h4><h5 id="通讯类型——同步-amp-异步"><a href="#通讯类型——同步-amp-异步" class="headerlink" title="通讯类型——同步&amp;异步"></a>通讯类型——同步&amp;异步</h5><p>一般来说，客户端连接数据库都是同步连接的</p><p><strong>同步</strong>的比较多，简单一些；<strong>异步</strong>编程难度较大。</p><hr><h5 id="连接方式——长连接-amp-短连接"><a href="#连接方式——长连接-amp-短连接" class="headerlink" title="连接方式——长连接&amp;短连接"></a>连接方式——长连接&amp;短连接</h5><p>Client，Terminal，Connector &amp; etc.</p><p><strong>短连接：</strong>即用即连，用完就关</p><p><strong>长连接：</strong>连接池，会消耗内存</p><p>一般来说都是<strong>长连接</strong>，而且会把这个连接放到客户端的连接池。</p><p>E.g.：淘宝早起用LAMP-PHP连MySQL——参考《淘宝技术这10年》</p><p>MySQL中查看线程数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">global</span> status <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;Thread%&#x27;</span>;<br></code></pre></td></tr></table></figure><p>Result 结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">Threads_cached   缓存中的线程连接数<br>Threads_connected 当前打开的连接数<br>Threads_created   为处理连接创建的线程数<br>Threads_running   非睡眠状态的连接数，通常指并发连接数<br></code></pre></td></tr></table></figure><hr><p>查看超时&amp;最大连接数</p><p>Timeout 超时时间</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">global</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;wait_timeout&#x27;</span>;  <span class="hljs-comment">-- 非交互式超时时间，如jdbc</span><br><span class="hljs-keyword">show</span> <span class="hljs-keyword">global</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;interactive_timeout&#x27;</span>;  <span class="hljs-comment">--交互式超时时间，如数据库工具</span><br></code></pre></td></tr></table></figure><p>默认都是28800秒，8 小时。</p><hr><p>查看最大连接数 Max Connections </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;max_connections&#x27;</span>;<br></code></pre></td></tr></table></figure><p>默认最大连接数为151。实际可以到100k</p><h5 id="修改连接数"><a href="#修改连接数" class="headerlink" title="修改连接数"></a>修改连接数</h5><ol><li>动态临时修改，服务器重启后会恢复</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> max_connections<span class="hljs-operator">=</span> ;<br><span class="hljs-keyword">set</span> autocommit <span class="hljs-operator">=</span><span class="hljs-keyword">on</span>;<br></code></pre></td></tr></table></figure><ol start="2"><li>永久修改</li></ol><p>修改**/etc/my.cnf 或 my.ini**</p><p>*两种参数级别</p><ol><li><strong>GLOBAL 全局</strong></li><li><strong>SESSION</strong> 当前会话窗口 (不带级别，默认SESSION)</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 自动提交 事务</span><br><span class="hljs-keyword">show</span> VARIABLES <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;autocommit&#x27;</span>; <br><br><span class="hljs-keyword">set</span> autocommit<span class="hljs-operator">=</span> <span class="hljs-keyword">on</span>;<br></code></pre></td></tr></table></figure><p>官网手册</p><p><a href="https://dev.mysql.com/doc/refman/5.7/en/">https://dev.mysql.com/doc/refman/5.7/en/</a></p><hr><h5 id="通讯协议"><a href="#通讯协议" class="headerlink" title="通讯协议"></a>通讯协议</h5><ol><li><strong>TCP/IP</strong></li></ol><p>如果指定-h 参数，就会用TCP/IP协议</p><p>编程语言的连接模块都是用 TCP 协议连接到 MysQL 服务器的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql <span class="hljs-operator">-</span>h<span class="hljs-operator">*</span>.<span class="hljs-operator">*</span>.<span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-operator">-</span>uroot <span class="hljs-operator">-</span>p<br></code></pre></td></tr></table></figure><ol start="2"><li><strong>Unix Socket</strong></li></ol><p>类似于之前Linux安装多个mysql时用的，在Linux服务器上，如果没有指定-h参数，它就用socket方式登录。它不用通过网络协议，也可以连接到MySQL的服务器，它需要用到服务器上的一个物理文件(/var/lib/mysql/mysql.sock)</p><hr><h5 id="通信方式"><a href="#通信方式" class="headerlink" title="通信方式"></a>通信方式</h5><ol><li><strong>单工：</strong>数据单向传输</li></ol><p>在两台计算机通信的时候，数据的传输是单向的。</p><p>生活中的类比：遥控器。</p><ol start="2"><li><strong>半双工：</strong>数据双向传输，但不能同时传输 </li></ol><p><strong>MySQL 使用了半双工的通信方式。</strong></p><p>生活中的类比：对讲机。</p><ol start="3"><li><strong>全双工：</strong>数据双向传输，可以同时传输</li></ol><p>生活中的类比：打电话。</p><p>SQL语句默认不超过 4MB，4194304</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">global</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;max_allowed_packet&#x27;</span>;<br></code></pre></td></tr></table></figure><p>对于服务端来说，也是一次性发送所有的数据，不能因为你已经取到了想 要的数据就中断操作，这个时候会对网络和内存产生大量消耗。</p><p>所以，在程序里面要避免不带<strong>limit</strong> 的这种操作，比如一次把所有满足条件的数据全 部查出来，<strong>一定要先count一下</strong>。如果数据量的话，可以分批查询。</p><hr><h2 id="查询缓存-Query-Cache"><a href="#查询缓存-Query-Cache" class="headerlink" title="查询缓存 Query Cache"></a>查询缓存 Query Cache</h2><p>查询缓存，默认关闭。</p><p>Query cache, default status is closed.</p><p>作用帮助不大，缓存这一块，还是交给ORM框架，或者独立的缓存服务，比如Redis等来处理更合适。<strong>在My SQL 8. 0 中，查询缓存功能已经被移除了。</strong></p><p>The function is not very helpful, usually we will use ORM framework or some other independent cache server like redis to deal with. From 8.0 or futher version, the cache query function is removed.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;query_cache%&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="Parser-amp-Pre-processor-语法解析和预处理"><a href="#Parser-amp-Pre-processor-语法解析和预处理" class="headerlink" title="Parser &amp; Pre-processor 语法解析和预处理"></a>Parser &amp; Pre-processor 语法解析和预处理</h2><ol><li><strong>词法解析</strong></li></ol><p>将单词打碎成一个个单词，逐个解析，进行词法分析。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> name <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span> ;<br></code></pre></td></tr></table></figure><p>它会打碎成8个符号，每个符号是什么类型，从哪里开始到哪里结束。</p><ol start="2"><li><strong>语法解析</strong></li></ol><p>语法分析会对SQL做一些语法检查，比如单引号有没有闭合，然后根据MySQL定义的语法规则，根据SQL语句生成一个数据结构——<strong>解析树 (select_lex)。</strong></p><p>编写一个自己的连接池的中间件，也要实现这些功能。</p><p><img src="1668589755774-3f005eae-3b86-42a4-94b7-69775452b65a.png" alt="select_lex"></p><ol start="3"><li><strong>预处理器</strong></li></ol><p>语义解析：检查生成的解析树，解决解析器无法解析的语义，如<strong>是否存在该表，该数据库等</strong></p><p>权限：检查<strong>是否有权限执行</strong>该语句</p><p><strong>预处理之后得到一个新的解析树。</strong></p><hr><h2 id="Query-Optimizer-amp-Execution-plans-查询优化与查询执行计划"><a href="#Query-Optimizer-amp-Execution-plans-查询优化与查询执行计划" class="headerlink" title="Query Optimizer&amp; Execution plans 查询优化与查询执行计划"></a>Query Optimizer&amp; Execution plans 查询优化与查询执行计划</h2><h5 id="优化器-Optimizer"><a href="#优化器-Optimizer" class="headerlink" title="优化器 Optimizer"></a>优化器 Optimizer</h5><p>一条SQL语句是可以有很多种执行方式的，最终返回相同的结果，他们是等价的。</p><p>查询优化器的目的就是根据<strong>解析树</strong>生成不同的执行计划(Execution Plan) ，然后选择一种最优的执行计划，MySQL里面使用的是基于开销（cost）的优化器，那种<strong>执行计划开销最小</strong>，就用哪种。</p><p><strong>Cost Based Optimizer CBO优化器</strong></p><p>查看查询开销</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> status <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;Last_query_cost&#x27;</span>;<br></code></pre></td></tr></table></figure><p>优化器可以做什么</p><ol><li>以哪张表为<strong>基准表</strong></li><li>有多个素引可以使用的时候，<strong>选择哪个索引</strong></li><li>对于<strong>查询条件的优化</strong>，比如移除1=1之类的恒等式，移除不必要的括号，表达式的计算，子查询和连接查询的优化。</li></ol><h5 id="执行计划-execution-plans"><a href="#执行计划-execution-plans" class="headerlink" title="执行计划 execution plans"></a>执行计划 execution plans</h5><p>优化器最终会把解析树变成一个执行计划(execution plans)，执行计划也是一个数据结构。</p><p>MysQL提供了一个执行计划的工具。我们在SQL语向前面加 上EXPLAIN，就可以 看到执行计划的信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-keyword">select</span> name <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><hr><h2 id="存储引擎Storage-Engine"><a href="#存储引擎Storage-Engine" class="headerlink" title="存储引擎Storage Engine"></a>存储引擎Storage Engine</h2><p>在MySQL里面，支持多种存储引擎，他们是可以替换的，所以叫做插件式的存储引擎。</p><p>MySQL can support various kinds of storage engines, they can be replaced by each other, hence the engines are also called as pluggable storage enginees.</p><p>查看数据库的存储引擎</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">table</span> status <span class="hljs-keyword">from</span> 数据库名;<br></code></pre></td></tr></table></figure><p>查看存储引擎</p><p>See storage engine</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> engines;<br></code></pre></td></tr></table></figure><h2 id="MySQL-5-7-Supported-Storage-Engines"><a href="#MySQL-5-7-Supported-Storage-Engines" class="headerlink" title="MySQL 5.7 Supported Storage Engines"></a>MySQL 5.7 Supported Storage Engines</h2><ul><li><a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-storage-engine.html">InnoDB</a>: The default storage engine in MySQL 5.7. InnoDB is a transaction-safe (ACID compliant) storage engine for MySQL that has commit, rollback, and crash-recovery capabilities to protect user data. InnoDB row-level locking (without escalation to coarser granularity locks) and Oracle-style consistent nonlocking reads increase multi-user concurrency and performance. InnoDB stores user data in clustered indexes to reduce I/O for common queries based on primary keys. To maintain data integrity, InnoDB also supports FOREIGN KEY referential-integrity constraints. For more information about InnoDB, see <a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-storage-engine.html">Chapter 14,The InnoDB Storage Engine</a>.</li><li><a href="https://dev.mysql.com/doc/refman/5.7/en/myisam-storage-engine.html">MyISAM</a>: These tables have a small footprint. <a href="https://dev.mysql.com/doc/refman/5.7/en/glossary.html#glos_table_lock">Table-level locking</a> limits the performance in read/write workloads, so it is often used in read-only or read-mostly workloads in Web and data warehousing configurations.</li><li><a href="https://dev.mysql.com/doc/refman/5.7/en/memory-storage-engine.html">Memory</a>（内存存储，快，易丢失）: Stores all data in RAM, for fast access in environments that require quick lookups of non-critical data. This engine was formerly known as the HEAP engine. Its use cases are decreasing; InnoDB with its buffer pool memory area provides a general-purpose and durable way to keep most or all data in memory, and NDBCLUSTER provides fast key-value lookups for huge distributed data sets.</li><li><a href="https://dev.mysql.com/doc/refman/5.7/en/csv-storage-engine.html">CSV</a>（容易解析，快）: Its tables are really text files with comma-separated values. CSV tables let you import or dump data in CSV format, to exchange data with scripts and applications that read and write that same format. Because CSV tables are not indexed, you typically keep the data in InnoDB tables during normal operation, and only use CSV tables during the import or export stage.</li><li><a href="https://dev.mysql.com/doc/refman/5.7/en/archive-storage-engine.html">Archive</a>(归档不动的数据，易压缩): These compact, unindexed tables are intended for storing and retrieving large amounts of seldom-referenced historical, archived, or security audit information.</li><li><a href="https://dev.mysql.com/doc/refman/5.7/en/blackhole-storage-engine.html">Blackhole</a>: The Blackhole storage engine accepts but does not store data, similar to the Unix /dev/null device. Queries always return an empty set. These tables can be used in replication configurations where DML statements are sent to replica servers, but the source server does not keep its own copy of the data.</li><li><a href="https://dev.mysql.com/doc/refman/5.7/en/mysql-cluster.html">NDB</a> (also known as <a href="https://dev.mysql.com/doc/refman/5.7/en/mysql-cluster.html">NDBCLUSTER</a>): This clustered database engine is particularly suited for applications that require the highest possible degree of uptime and availability.</li><li><a href="https://dev.mysql.com/doc/refman/5.7/en/merge-storage-engine.html">Merge</a>: Enables a MySQL DBA or developer to logically group a series of identical MyISAM tables and reference them as one object. Good for VLDB environments such as data warehousing.</li><li><a href="https://dev.mysql.com/doc/refman/5.7/en/federated-storage-engine.html">Federated</a>: Offers the ability to link separate MySQL servers to create one logical database from many physical servers. Very good for distributed or data mart environments.</li><li><a href="https://dev.mysql.com/doc/refman/5.7/en/example-storage-engine.html">Example</a>: This engine serves as an example in the MySQL source code that illustrates how to begin writing new storage engines. It is primarily of interest to developers. The storage engine is a “stub” that does nothing. You can create tables with this engine, but no data can be stored in them or retrieved from them.</li></ul><p>You are not restricted to using the same storage engine for an entire server or schema. You can specify the storage engine for any table. For example, an application might use mostly InnoDB tables, with one CSV table for exporting data to a spreadsheet and a few MEMORY tables for temporary workspaces.</p><p>不同的所属引擎，有不同的特性，根据实际业务需求进行切换。不同的表可以切换不同的存储引擎。修改存储引擎会锁表，不要在生产环境中进行操作。</p><hr><p>查看数据存储位置</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;datadir&#x27;</span>;<br></code></pre></td></tr></table></figure><p>可以看到存储引擎不同，底层文件不一样</p><p><img src="1668581816297-7b6677df-43d0-495c-ae6c-67de5711f2ec.png" alt="Files"></p><p>任何一个存储引擎都有一个frm文件，这个是表结构定义文件。不同的存储引擎存放数据的方式不一样，产生的文件也不一样，InnoDB是1个，MEMORY没有，MyISAM是两个。</p><p>存储引擎就是我们的数据真正存放的地方，在MySQL里面支持不同的存储引擎。再往下就是文件管理系统，内存或者磁盘。</p><h5 id="执行引擎-Execution-Engine"><a href="#执行引擎-Execution-Engine" class="headerlink" title="执行引擎 Execution Engine"></a>执行引擎 Execution Engine</h5><p>所有的存储引擎，都要根据规范，<strong>开放接口</strong>给执行器进行操作执行。</p><p>执行器利用存储引擎提供的相应的API来完成操作。</p><p>No matter whichever engine you choose to use, execution engine can run.</p><hr><h4 id="顺序I-O-VS-随机I-O"><a href="#顺序I-O-VS-随机I-O" class="headerlink" title="顺序I/O VS 随机I/O"></a>顺序I/O VS 随机I/O</h4><p><strong>顺序IO：</strong>不需要重新寻址，比较快速地拿到数据，效率高；由于地址是连贯的，找到地址后，一次可以读写许多数据，效率比较高。</p><p><strong>随机IO：</strong>会将数据随机分散在磁盘不同也得不同扇区，读取数据速度较慢。需要先找到地址，再读写数据，每次拿到的地址都是随机的。</p><p>刷盘是随机I/O，而记录日志是顺序I/O（连续写的），顺序I/O效率更高。因此先把修改写入日志文件，在保证了内存数据的安全性的情况下，可以延迟刷盘时机，进而提升系统吞吐。</p><h2 id="缓冲池-Buffer-Pool"><a href="#缓冲池-Buffer-Pool" class="headerlink" title="缓冲池 Buffer Pool"></a>缓冲池 Buffer Pool</h2><p>因为数据库需要频繁对磁盘进行 IO 操作，为了改善因为直接读写磁盘导致的 IO 性能问题，所以引入了缓冲池。</p><p>InnoDB设定了一个存储引擎从磁盘读取数据到内存的最小的单位，叫做页。操作系统也有页的概念。<strong>操作系统的页大小一般是4K(局部性原理)<strong>，而在InnoDB里面，这个最小的单位默认是 <strong>16KB</strong> 大小，它是一个逻辑单位。如果要修改这个值的大小，</strong>必须修改源码重新编译安装</strong>。</p><p>InnoDB使用了一种缓冲池的技术，也就是把磁盘读到的页放到一块内存区域里面。 下一次读取相同的页，先判断是不是在这个内存区域里面，如果是，就直接读取，然后操作，不用再次从磁盘加载。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> STATUS <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%innodb_buffer_pool%&#x27;</span>;<br></code></pre></td></tr></table></figure><p>Buffer Pool默认大小是128M (134217728字节)，可以调整。</p><p><img src="1668760214168-0b45b29f-b5ed-48d2-a20c-d09073c335a1.png" alt="redo log"></p><p>修改数据的时候，先修改内存缓冲池里面的页。内存的数据页和磁盘数据不一致的时候，我们把它叫做<strong>脏页</strong>。那脏页什么时候同步到磁盘呢? InnoDB里面有专门的<strong>后台线程</strong>把Buffer Pool的数据写入到磁盘，<strong>每隔一段时间就一次性地把多个修改写入磁盘，这个动作就叫做刷脏。</strong></p><p><strong>PS：</strong>刷脏页的过程是异步的，这样更新操作就不需要等待磁盘的 IO 操作了。因此这些特点极大地提升了 InnoDB 的性能。</p><hr><h2 id="redo-Log-Buffer"><a href="#redo-Log-Buffer" class="headerlink" title="(redo) Log Buffer"></a>(redo) Log Buffer</h2><p>因为刷脏不是实时的，如果Buffer Pool 里面的脏页还没有刷入磁盘时，数据库宕机或者重启，这些数据就会丢失。</p><p>所以，内存的数据必须要有一个持久化的措施。</p><p>InnoDB 把所有对页面的修改操作专门写入一个日志文件。</p><p>如果有未同步到磁盘的数据，数据库在启动的时候，会从这个日志文件进行恢复操作 (实现crash-safe) 。 我们说的事务的ACID里面D（持久性），就是用它来实现的。</p><p><strong>WAL（Write-Ahead Logging，日志先行）</strong> 。即：事务提交前先写日志，再修改页（修改页的时机就是刷脏页的时机）。这里所谓的日志，就是 磁盘的redo log（重做日志），默认2个文件，每个文件48M</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;innodb_log%&#x27;</span>;<br></code></pre></td></tr></table></figure><p>除了redolog之外，还有一个跟修改有关的日志，叫做undolog.redo.log 和 undo.log 与事务密切相关，统称为事务日志。</p><p>在写 redo log 时会先写 redo log buffer，并在以下时机将 redo log 刷新到磁盘：</p><ul><li>每秒刷新一次</li><li>事务提交时</li><li>redo log buffer 剩余空间小于 1/2 时</li></ul><h4 id="Feature-Of-redo-log-特点"><a href="#Feature-Of-redo-log-特点" class="headerlink" title="Feature Of redo log  特点"></a>Feature Of redo log  特点</h4><ol><li>redo log 是InnoDB存储引擎实现的，并不是所有存储引擎都有，<strong>支持崩溃恢复是InnoDB的一个特性</strong>；</li><li>redo log 是<strong>物理日志</strong>，记录的事“在某个数据页上做了什么修改”；</li><li>redo log 的大小是固定的，前面的内容会被覆盖，一旦写满，就会触发buffer pool到磁盘的同步，一边腾出空间记录后面的修改。默认是48M</li></ol><p>除了redo log，还有一个跟修改有关的日志，叫做undo log（逻辑日志）。redo log和undo log 与事务密切相关，统称为事务日志。</p><p>undo log (撤销日志或回滚日志)记录了事务发生之前的数据状态(不包括select)。如果修改数据时出现异常，可以用undo log 来实现回滚操作（保持原子性，ACID的A）。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">global</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%undo%&#x27;</span>;<br></code></pre></td></tr></table></figure><hr><h4 id="后台线程"><a href="#后台线程" class="headerlink" title="后台线程"></a>后台线程</h4><p>后台线程的主要作用是负责刷新内存是中的数据和把修改的数据页刷新到磁盘，后台线程分为：master thread , IO thread（主服务器数据发给从服务器）, purge thread（刷脏的）, page cleaner thread（清除缓存）。</p><hr><h4 id="binlog"><a href="#binlog" class="headerlink" title="binlog"></a>binlog</h4><p>MySQL的Server层也有一个日志文件，叫做binlog，可以被所有的存储引擎使用，默认是关闭的。</p><p>binlog 是 MySQL 服务器层面实现的一种二进制日志，用于记录所有对数据库的更改操作（这种日志被称为逻辑日志）。</p><p>一般我们会将 binlog 用于以下几个方面：</p><ol><li><strong>主从复制：</strong>MySQL 从服务器可以通过订阅 binlog 实现对主服务器的增量复制。</li><li><strong>审计：</strong>通过对 binlog 中的数据进行审计，判断是否存在安全问题，比如 SQL 注入。</li><li><strong>数据库增量备份与恢复：</strong>在使用备份还原数据后，可以使用 binlog 中记录的内容对备份时间点（简称备份点）后的数据进行恢复。因为 binlog 会还会记录下更改操作的时间，所以 binlog 可以恢复到某一具体时间点的数据。这就为我们删库后提供了除跑路以外的第二个选项：使用 binlog 恢复数据。</li></ol><p><strong>使用 binlog 进行恢复的流程是：</strong></p><ol><li>先通过最新的备份恢复数据库的全量数据，并记录下备份文件备份的时间点；</li><li>在 binlog 中找到这个时间点，提取这个时间点以后的数据用于实现对备份点后数据的恢复（这个特性被称为 Point in Time，简称 PIT）。</li></ol><p><strong>有 binlog 为什么还要 redo log ？</strong></p><ol><li>binlog 不知道数据库究竟是在哪一时刻丢失了哪部分数据，只能从备份点开始对 binlog 记录重放来恢复数据，比较耗时。</li><li>binlog 恢复是需要我们手动执行的，而 redo log 可以在服务器重启后自动恢复数据。</li><li>WAL + 先写缓冲 + 异步刷脏页有效提升了磁盘的 IO 效率。</li></ol><p><strong>有 redo log 为什么还要 binlog？</strong></p><ol><li>binlog 是服务器层面的功能，redo log 是 innoDB 的功能。redo log 帮助 InnoDB 实现了性能提升、自动恢复。但其他存储引擎是无法使用 redo log 的能力的。</li><li>我们也可以关闭 binlog，但大多数情况下我们都会开启，因为开启的好处更多。比如，主从模式需要订阅 binlog 进行主从复制，以及可以通过 binlog 进行数据库的增量备份和恢复。</li></ol><p>redo log 有很多好处，所以我们不能放弃；binlog 也有很多好处，我们也不能放弃。</p><p>也就是说，这两个功能我们都需要开启。</p><p>既然都要开启，那么 我们必须保证 redo log 和 binlog 数据的一致性。 如果 binlog 有 redo log 没有，那么 redo log 宕机自动恢复时的数据就会缺少；反之，redo log 有，binlog 没有，如果开启了主从模式，主服务器因为 redo log 恢复了数据，但从服务器靠消费 binlog 保证和主服务器数据一致，这就导致从服务器比主服务器数据少。</p><p>参考：</p><p><a href="https://www.51cto.com/article/717149.html">https://www.51cto.com/article/717149.html</a></p><p><a href="https://www.rathishkumar.in/2016/04/understanding-mysql-architecture.html">https://www.rathishkumar.in/2016/04/understanding-mysql-architecture.html</a></p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Review MySQL - Definitions&amp;Schemas</title>
    <link href="/2022/11/15/Review-MySQL-Definitions-Schemas/"/>
    <url>/2022/11/15/Review-MySQL-Definitions-Schemas/</url>
    
    <content type="html"><![CDATA[<p>It’s Tuesday Nov 15, 2022. After getting over from the breakup with my ex-gf, I have to start what I really need to do now.Thus, I will spend more time reviewing the knowledge of MySQL &amp; Java. </p><h2 id="Some-Definitions-一些定义"><a href="#Some-Definitions-一些定义" class="headerlink" title="Some Definitions 一些定义"></a>Some Definitions 一些定义</h2><p>DB = Data Base 数据库</p><p>DBMS = Data Base Management System 数据库管理系统</p><p>SQL = Structured Query Language 结构化查询语言</p><hr><h3 id="Common-Databases-常见数据库"><a href="#Common-Databases-常见数据库" class="headerlink" title="Common Databases 常见数据库"></a>Common Databases 常见数据库</h3><ol><li>Oracle(Relational) </li><li>MySQL(Relational)</li><li>SQL Server(Relational)</li><li>MongoDB(Document)</li><li>Elastic Search(Search engine)</li><li>Redis(Key-value)</li><li>PostgreSQL(Relational)</li></ol><hr><h2 id="Rank-Of-Databases-数据库排名"><a href="#Rank-Of-Databases-数据库排名" class="headerlink" title="Rank Of Databases 数据库排名"></a>Rank Of Databases 数据库排名</h2><p><a href="https://db-engines.com/en/ranking">https://db-engines.com/en/ranking</a></p><hr><h2 id="ORM-Framework"><a href="#ORM-Framework" class="headerlink" title="ORM Framework"></a>ORM Framework</h2><p>ORM = Object Relational Mapping 对象关系映射</p><p>在java中</p><p>表-table = Java 的类</p><p>表种的一行数据 = Java类的一个对象</p><p>表的一个字段（列）= 类的一个属性</p><hr><h2 id="Relational-Databases-VS-Non-Relational-Databases"><a href="#Relational-Databases-VS-Non-Relational-Databases" class="headerlink" title="Relational Databases VS Non-Relational Databases"></a>Relational Databases VS Non-Relational Databases</h2><h3 id="Relational-Databases-关系型数据库"><a href="#Relational-Databases-关系型数据库" class="headerlink" title="Relational Databases  关系型数据库"></a>Relational Databases  关系型数据库</h3><p>A relational database, also called Relational Database Management System (RDBMS) or SQL database, stores data in tables and rows also referred to as records. The term “relational database” was first used in 1970 by E.F. Codd at IBM in his research paper “A Relational Model of Data for Large Shared Data Banks.” Historically, the most popular relational databases have been <em><strong>Microsoft SQL Server, Oracle Database, MySQL and IBM DB2</strong></em>. Several free versions of these RDBMS platforms have gained popularity over the years, such as SQL Server Express, PostgreSQL, SQLite, MySQL and MariaDB.</p><h3 id="Non-Relational-Databases-非关系型数据库"><a href="#Non-Relational-Databases-非关系型数据库" class="headerlink" title="Non-Relational Databases 非关系型数据库"></a>Non-Relational Databases 非关系型数据库</h3><p>The non-relational database, or NoSQL database, stores data. However, unlike the relational database, there are no tables, rows, primary keys or foreign keys.  Instead, the non-relational database uses a storage model optimized for specific requirements of the type of data being stored.</p><p>Some of the more popular NoSQL databases are MongoDB, Apache Cassandra, Redis, Couchbase and Apache HBase.</p><p>There are four popular non-relational types: <em><strong>document data store, column-oriented database, key-value store and graph database</strong></em>. Often combinations of these types are used for a single application.</p><hr><h2 id="Types-Of-Relationships-In-Databases-表关系类型"><a href="#Types-Of-Relationships-In-Databases-表关系类型" class="headerlink" title="Types Of Relationships In Databases 表关系类型"></a>Types Of Relationships In Databases 表关系类型</h2><p>There are 3 main types of relationship in a database:</p><ul><li>one-to-one   一对一</li><li>one-to-many  一对多</li><li>many-to-many 多对多</li></ul><h3 id="1-One-To-One-一对一"><a href="#1-One-To-One-一对一" class="headerlink" title="1.One To One 一对一"></a>1.One To One 一对一</h3><p>学生表 :学号、姓名、手机号码、班级、系别、身份证号码、家庭住址、籍贯、紧急 联系人、… </p><p>拆为两个表:两个表的记录是一一对应关系。</p><p> <strong>(常用信息)</strong>:学号、姓名、手机号码、班级、系别 </p><p><strong>(不常用信息)</strong>:学号、身份证号码、家庭住址、籍贯、紧急联系人、… </p><h3 id="2-One-To-Many-一对多"><a href="#2-One-To-Many-一对多" class="headerlink" title="2.One To Many 一对多"></a>2.One To Many 一对多</h3><p>员工表-部门表：员工表中部门用id表示，对应部门表的字段id，员工表中的id可重复使用，公司场景</p><p>分类表-商品表：商品表中的所属分类用id表示，对应分类的字段id，分类id应可重复使用，因为各种商品可能是同一个分类，电商场景</p><p>客户表-订单表：订单表中的客户id，对应客户表中的id</p><h3 id="3-Many-To-Many-多对多"><a href="#3-Many-To-Many-多对多" class="headerlink" title="3.Many-To-Many 多对多"></a>3.Many-To-Many 多对多</h3><p>一般需要一个中间表，中间表确定其他2表之间的关系</p><p>学生信息表-课程信息表-选课信息表</p><p>产品表-订单表-订单明细表</p><h3 id="Self-referencing-relationship-自我引用"><a href="#Self-referencing-relationship-自我引用" class="headerlink" title="*Self-referencing relationship 自我引用"></a>*Self-referencing relationship 自我引用</h3><p>A self-referencing relationship (also known as a recursive relationship) in a database occurs when a column in a table relates to another column in the same table. In such a relationship, only one table is involved. For example, the Staff table contains information about company employees and their managers, however, managers themselves belong to staff too.</p><p><img src="1668498939020-69d0bf75-3c97-4f9a-917e-abec8c944aab.png" alt="Self-referencing"></p><p>Reference 参考：</p><p><a href="https://blog.devart.com/types-of-relationships-in-sql-server-database.html">https://blog.devart.com/types-of-relationships-in-sql-server-database.html</a></p><hr><h2 id="MySQL-的一些指令"><a href="#MySQL-的一些指令" class="headerlink" title="MySQL 的一些指令"></a>MySQL 的一些指令</h2><ol><li><strong>Login 登陆</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">#format 格式<br>mysql -h 主机名 -P 端口号 -u 用户名 -p密码<br><br>#We don&#x27;t enter password as usual for security 我们通常为了安全不会输密码<br>mysql -uroot -p<br></code></pre></td></tr></table></figure><ol start="2"><li><strong>Check Version Of MySQL查看版本</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">#command in terminal system  系统自带的终端命令<br>mysql --version<br><br>#or enter mysql 或进入mysql后执行<br>select version();<br></code></pre></td></tr></table></figure><p>​                                         </p><ol start="3"><li><strong>Check default charset 查看默认使用的字符集</strong> </li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plain">show variables like &#x27;character%&#x27;; <br># or<br>show variables like &#x27;%char%&#x27;;<br><br>#sometimes we need to know charset of databses or tables;<br>show create database 数据库名 \G;<br>show create table 表名 \G;<br></code></pre></td></tr></table></figure><ol start="4"><li><strong>Common command 常见指令</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs plain">#see all databases 查看所有数据库;<br>show databses;<br><br>#create a new database 创建一个新数据库<br>create database 数据库名;<br><br>#switch to database you choose;切换到所选择的数据库<br>use 数据库名;<br><br>#see all tables in current database 查看当前数据库的所有表<br>show tables;<br><br>#remove selected database 删除所选择的数据库<br>drop database 数据库名;<br><br>#remove selecred table 删除所选择的表<br>drop table 表名;<br><br>#create a table with some fileds 创建一个带字段的表<br>create table 表名称( 字段名 数据类型,<br>字段名 数据类型<br>);<br></code></pre></td></tr></table></figure><hr><h2 id="SQL语言"><a href="#SQL语言" class="headerlink" title="SQL语言"></a>SQL语言</h2><table><thead><tr><th><strong>SQL FUNCTION</strong></th><th><strong>KEYWORD</strong></th></tr></thead><tbody><tr><td>DDL(Data Definition Language)</td><td>CREATE, DROP, ALTER</td></tr><tr><td>DQL(Data Query Language)</td><td>SELECT</td></tr><tr><td>DML(Data Manipulation Language)</td><td>INSERT, UPDATE, DELETE</td></tr><tr><td>DCL(Data Control Language)</td><td>GRANT, REVOKE, DENY</td></tr></tbody></table><h1 id="DBMS-Schemas-Internal-Conceptual-External"><a href="#DBMS-Schemas-Internal-Conceptual-External" class="headerlink" title="DBMS Schemas: Internal, Conceptual, External"></a>DBMS Schemas: Internal, Conceptual, External</h1><p>Database systems comprise of complex data structures. Thus, to make the system efficient for retrieval of data and reduce the complexity of the users, developers use the method of Data Abstraction.</p><p>There are mainly three levels of data abstraction:</p><ol><li><strong>Internal Level:</strong> Actual PHYSICAL storage structure and access paths.  物理存储</li><li><strong>Conceptual or Logical Level:</strong> Structure and constraints for the entire database.  结构和约束</li><li><strong>External or View level:</strong> Describes various user views. 描述各类用户视图</li></ol><p><img src="1668517059517-4c3950e1-5585-425c-a9a3-41f38d2ba56a.png" alt="Schema"></p><h3 id="Internal-Level-Schema-内模式"><a href="#Internal-Level-Schema-内模式" class="headerlink" title="Internal Level/Schema 内模式"></a>Internal Level/Schema 内模式</h3><p>The internal schema defines the physical storage structure of the database. The internal schema is a very low-level representation of the entire database. It contains multiple occurrences of multiple types of internal record. In the ANSI term, it is also called “stored record’.</p><p>Facts about <strong>Internal schema:</strong></p><ul><li>The internal schema is the lowest level of data abstraction</li><li>It helps you to keeps information about the actual representation of the entire database. Like the actual storage of the data on the disk in the form of records</li><li>The internal view tells us what data is stored in the database and how</li><li>It never deals with the physical devices. Instead, internal schema views a physical device as a collection of physical pages</li></ul><h3 id="Conceptual-Schema-Level-概念模式"><a href="#Conceptual-Schema-Level-概念模式" class="headerlink" title="Conceptual Schema/Level 概念模式"></a>Conceptual Schema/Level 概念模式</h3><p>The conceptual schema describes the Database structure of the whole database for the community of users. This schema hides information about the physical storage structures and focuses on describing data types, entities, relationships, etc.</p><p>This logical level comes between the user level and physical storage view. However, there is only single conceptual view of a single database.</p><p>Facts about <strong>Conceptual schema:</strong></p><ul><li>Defines all database entities, their attributes, and their relationships</li><li>Security and integrity information</li><li>In the conceptual level, the data available to a user must be contained in or derivable from the physical level</li></ul><h3 id="External-Schema-Level-外模式"><a href="#External-Schema-Level-外模式" class="headerlink" title="External Schema/Level 外模式"></a>External Schema/Level 外模式</h3><p>An external schema describes the part of the database which specific user is interested in. It hides the unrelated details of the database from the user. There may be “n” number of external views for each database.</p><p>Each external view is defined using an external schema, which consists of definitions of various types of external record of that specific view.</p><p>An external view is just the content of the database as it is seen by some specific particular user. For example, a user from the sales department will see only sales related data.</p><p>Facts about <strong>external schema:</strong></p><ul><li>An external level is only related to the data which is viewed by specific end users;</li><li>This level includes some external schemas;</li><li>External schema level is nearest to the user;  离用户最近的层</li><li>The external schema describes the segment of the database which is needed for a certain user group and hides the remaining details from the database from the specific user group</li></ul><h3 id="Goal-of-3-level-schema-of-Database"><a href="#Goal-of-3-level-schema-of-Database" class="headerlink" title="Goal of 3 level/schema of Database"></a>Goal of 3 level/schema of Database</h3><p>Here, are some Objectives of using Three schema Architecture:</p><ul><li>Every user should be able to access the same data but able to see a customized view of the data. 每个用户应该可以访问同样的数据，但是可以有一个定制的视图；</li><li>The user need not to deal directly with physical database storage detail. 用户不需要直接处理物理数据库存储详细；</li><li>The DBA should be able to change the database storage structure without disturbing the user’s views. 数据架构师能够改变数据库存储结构并不影响用户视图；</li><li>The internal structure of the database should remain unaffected when changes made to the physical aspects of storage. 当对存储的物理方面进行更改时，数据库的内部结构应保持不受影响。</li></ul><h3 id="Advantages-Database-Schema"><a href="#Advantages-Database-Schema" class="headerlink" title="Advantages Database Schema"></a>Advantages Database Schema</h3><ul><li>You can manage data independent of the physical storage</li><li>Faster Migration to new graphical environments</li><li>DBMS Architecture allows you to make changes on the presentation level without affecting the other two layers</li><li>As each tier is separate, it is possible to use different sets of developers</li><li>It is more secure as the client doesn’t have direct access to the database business logic</li><li>In case of the failure of the one-tier no data loss as you are always secure by accessing the other tier</li></ul><h3 id="Disadvantages-Database-Schema"><a href="#Disadvantages-Database-Schema" class="headerlink" title="Disadvantages Database Schema"></a>Disadvantages Database Schema</h3><ul><li>Complete DB Schema is a complex structure which is difficult to understand for every one. 完整的数据库模式是非常复杂的，对所有人都难理解；</li><li>Difficult to set up and maintain. 维护和建立会是困难的；</li><li>The physical separation of the tiers can affect the performance of the Database. 层级的物理隔离会影响数据库性能</li></ul><h3 id="Summary-总结"><a href="#Summary-总结" class="headerlink" title="Summary 总结"></a>Summary 总结</h3><ul><li>There are mainly three levels of data abstraction: Internal Level, Conceptual or Logical Level or External or View level.</li><li>The internal schema defines the physical storage structure of the database.</li><li>The conceptual schema describes the Database structure of the whole database for the community of users.</li><li>An external schema describe the part of the database which specific user is interested in. <strong>外模式描述了特定用户对数据库的某部分感兴趣的视图</strong></li><li>DBMS Architecture allows you to make changes on the presentation level without affecting the other two layers. 在演示级别上进行更改，而不会影响其他两个层。</li></ul><hr><h2 id="三级模式-amp-两级映射"><a href="#三级模式-amp-两级映射" class="headerlink" title="三级模式&amp;两级映射"></a>三级模式&amp;两级映射</h2><p>三级模式指的是<strong>外模式、模式和内模式</strong>。两级映射指的是<strong>外模式-模式</strong>和<strong>模式-内模式</strong>。</p><h3 id="一、模式（Schema）"><a href="#一、模式（Schema）" class="headerlink" title="一、模式（Schema）"></a>一、模式（Schema）</h3><p>定义：也称逻辑模式，是数据库中全体数据的逻辑结构和特征的描述，是所有用户的公共数据视图，基本表。</p><p>理解： </p><p>① 一个数据库只有一个模式； </p><p>② 是数据库数据在逻辑级上的视图； </p><p>③ 数据库模式以某一种数据模型为基础； </p><p>④ 定义模式时不仅要定义数据的逻辑结构（如数据记录由哪些数据项构成，数据项的名字、类型、取值范围等），而且要定义与数据有关的安全性、完整性要求，定义这些数据之间的联系。</p><h3 id="二、外模式（External-Schema）"><a href="#二、外模式（External-Schema）" class="headerlink" title="二、外模式（External Schema）"></a>二、外模式（External Schema）</h3><p>定义：也称子模式（Subschema）或用户模式，是数据库用户（包括应用程序员和最终用户）能够看见和使用的局部数据的逻辑结构和特征的描述，是数据库用户的数据视图，是与某一应用有关的数据的逻辑表示。</p><p>理解： </p><p>① 一个数据库可以有多个外模式；</p><p> ② 外模式就是用户视图； </p><p>③ 外模式是保证数据安全性的一个有力措施。</p><h3 id="三、内模式（Internal-Schema）"><a href="#三、内模式（Internal-Schema）" class="headerlink" title="三、内模式（Internal Schema）"></a>三、内模式（Internal Schema）</h3><p>定义：也称存储模式（Storage Schema），它是数据物理结构和存储方式的描述，是数据在数据库内部的表示方式（例如，记录的存储方式是顺序存储、按照B树结构存储还是按hash方法存储；索引按照什么方式组织；数据是否压缩存储，是否加密；数据的存储记录结构有何规定）。</p><p>理解： </p><p>① 一个数据库只有一个内模式； </p><p>② 一个表可能由多个文件组成，如：数据文件、索引文件。 它是数据库管理系统(DBMS)对数据库中数据进行有效组织和管理的方法 其目的有： ① 为了减少数据冗余，实现数据共享； ② 为了提高存取效率，改善性能。</p><p><img src="1668503095705-a964b874-87be-49ba-b3a0-242bc97848ee.png" alt="Schemas For Reference"></p><h3 id="三级模式的优点"><a href="#三级模式的优点" class="headerlink" title="三级模式的优点"></a>三级模式的优点</h3><p>1）保证了数据的独立性，将模式与内模式分开，保证了数据的物理独立性，将外模式分开，保证了数据的逻辑独立性；</p><p>2）简单用户接口：按照外模式编写应用程序或输入命令，而不需要了解数据库内部的存储结构，方便用户使用系统；</p><p>3）有利于数据共享：在不同的外模式下可以有多个用户共享系统中数据，减少了数据冗余；</p><p>4）有利于数据的安全保密：在外模式下根据要求进行操作，只能对限定的数据操作，保证了其他数据的安全。</p><h3 id="摘自图书馆某书："><a href="#摘自图书馆某书：" class="headerlink" title="摘自图书馆某书："></a>摘自图书馆某书：</h3><p><strong>基本表</strong>（指逻辑模式）是独立存在的，在SQL 中一个关系对应一个表。<strong>一个或多个基本表对应一个存储文件</strong>，每个表有若干素引，索引也存放在存储文件中。</p><p>视图(指外模式)是从一个或多个基本表导出的虚拟表，视图本身不独立存储在数据库中，数据库中只存储视图的定义而不存储对应的数据，视图对应的数据被存放在基本表中。用户可以用 SQL 语句对视图和基本表进行查询等操作。 存储文件的逻辑结构组成了关系数据库的内模式，所以其物理结构是任意的，对用户是透明。</p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Installation Of Win11 With Parallels Desktop 17 On MacOS</title>
    <link href="/2022/11/06/Installation-Of-Win11-With-Parallels-Desktop-17-On-MacOS/"/>
    <url>/2022/11/06/Installation-Of-Win11-With-Parallels-Desktop-17-On-MacOS/</url>
    
    <content type="html"><![CDATA[<p>Sometimes I need Windows system to do something necessary.I hate it but we don’t have other choices.Therefor, the ideal way to solve is installing PD on MacOS.</p><p>This is a record during I use PD17 to install Win 11 on my Macbook Air.Maybe sometimes I need to review and reinstall it in the future when it is expired.</p><h2 id="Download-packages-from-my-aDrive"><a href="#Download-packages-from-my-aDrive" class="headerlink" title="Download packages from my aDrive"></a>Download packages from my aDrive</h2><p>What we need are shown as below</p><ul><li>Parallels Desktop 17</li><li>Win11 </li><li>ac.bat (Actiate Windows)</li><li>PD Patner (Skip notification of PD trial alert)</li></ul><p><img src="1667732545598-16a50e78-fd02-40aa-8892-1b489686be5b.png" alt="aDrive"></p><p>Follow the tips of installation package step by step then we can finish.</p><h2 id="Solution-to-network-issues"><a href="#Solution-to-network-issues" class="headerlink" title="Solution to network issues"></a>Solution to network issues</h2><p>We oftentimes may meet the issues of network on  Parallels Destop.To solve it, you can follow below.</p><ol><li>Edit network.desktop.xml.</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">cd /Library/Preferences/Parallels<br><br>vim network.desktop.xml<br></code></pre></td></tr></table></figure><ol><li>Modified [-1] or [0] as [1] , then save it.(sometimes should be 0)</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;UseKextless&gt;1&lt;/UseKextless&gt;<br><br>#sometimes should be 0<br></code></pre></td></tr></table></figure><p><img src="1667734408693-734706c7-0847-4adf-9a33-9666b725ba75.png" alt="Path Of PD17"></p><p>Finally, we have gotten win11 on MacOS successfully!!</p><p><img src="1667734717888-e18d399d-d03b-4303-ba26-11d1bae4dc60.png" alt="Win11 On MacOS"></p>]]></content>
    
    
    <categories>
      
      <category>Win11</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MacOS</tag>
      
      <tag>Installation</tag>
      
      <tag>Parallels Desktop</tag>
      
      <tag>Win11</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Location Of iOS Backup File On MacOS</title>
    <link href="/2022/11/05/Location-Of-iOS-Backup-File-On-MacOS/"/>
    <url>/2022/11/05/Location-Of-iOS-Backup-File-On-MacOS/</url>
    
    <content type="html"><![CDATA[<p>Record the backup process of iPhone on MacOS.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">/Users/hyk/Library/Application Support/MobileSync/Backup<br></code></pre></td></tr></table></figure><p><img src="backuping.png" alt="Backup"></p><p><img src="getInfo.png" alt="Info Of File"></p><p><img src="terminal.png" alt="Path On Terminal"></p>]]></content>
    
    
    <categories>
      
      <category>iOS</category>
      
      <category>Buckup</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MacOS</tag>
      
      <tag>iOS</tag>
      
      <tag>Backup</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Installations Of Docker &amp; Oh My Zsh On MacOS</title>
    <link href="/2022/11/05/InstallationsOfDockerAndOhMyZshOnMacOS/"/>
    <url>/2022/11/05/InstallationsOfDockerAndOhMyZshOnMacOS/</url>
    
    <content type="html"><![CDATA[<h2 id="Installation-Of-Docker"><a href="#Installation-Of-Docker" class="headerlink" title="Installation Of Docker"></a>Installation Of Docker</h2><p>To install docker, run the command as below.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">brew install --cask docker<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-keyword">then</span> enjoy it</span><br></code></pre></td></tr></table></figure><hr><h2 id="Installation-of-Oh-My-Zsh"><a href="#Installation-of-Oh-My-Zsh" class="headerlink" title="Installation of Oh My Zsh"></a>Installation of Oh My Zsh</h2><p>Mirror source of Gitee</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sh -c &quot;$(curl -fsSL https://gitee.com/mirrors/oh-my-zsh/raw/master/tools/install.sh)&quot;<br></code></pre></td></tr></table></figure><p>Source of Github</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">sh -c &quot;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)<span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure><hr><h2 id="Configuration-Of-Auto-Completion"><a href="#Configuration-Of-Auto-Completion" class="headerlink" title="Configuration Of Auto-Completion"></a>Configuration Of Auto-Completion</h2><ol><li>Create a dictory for Auto-Completion and pull the files from remote server.</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">create a dictory</span><br>mkdir -p ~/.zsh/completion<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">zsh-completions</span><br>git clone https://github.com/zsh-users/zsh-completions ~/.oh-my-zsh/custom/plugins/zsh-completions<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">completions of docker</span><br>curl -L https://raw.staticdn.net/docker/compose/1.27.4/contrib/completion/zsh/_docker-compose &gt; ~/.zsh/completion/_docker-compose<br></code></pre></td></tr></table></figure><ol start="2"><li>Copy files of Docker.app to ~/.zsh/completion</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">Copy Docker.app to  ~/.zsh/completion</span><br>cp /Applications/Docker.app/Contents/Resources/etc/docker.zsh-completion ~/.zsh/completion/_docker<br>cp /Applications/Docker.app/Contents/Resources/etc/docker-compose.zsh-completion ~/.zsh/completion/_docker-compose<br>cp /Applications/Docker.app/Contents/Resources/etc/docker-machine.zsh-completion ~/.zsh/completion/_docker-machine<br><br><br>vim ~/.zshrc<br></code></pre></td></tr></table></figure><ol start="3"><li>Put those below content into .zshrc file.</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">put those below into .zshrc</span><br>plugins=(git zsh-completions docker docker-compose)<br><br>fpath=(~/.zsh/completion $fpath)<br>autoload -Uz compinit &amp;&amp; compinit -i<br></code></pre></td></tr></table></figure><p>Logs for reference.</p><p><img src="da0605d3-d675-4581-bea5-6cec0a44c943.png" alt="Logs Of Teminal"></p><ol start="4"><li>Reload ~/.zshrc to make it into effect.</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">execute this</span><br>autoload -U compinit &amp;&amp; compinit<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-keyword">then</span> reload .zshrc</span><br>source ~/.zshrc<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>DevTools</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MacOS</tag>
      
      <tag>Installation</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Installations Of Homebrew, MySQL &amp; Redis On MacOS</title>
    <link href="/2022/11/05/InstallationsOfHomebrewMySQL&amp;RedisOnMacOS/"/>
    <url>/2022/11/05/InstallationsOfHomebrewMySQL&amp;RedisOnMacOS/</url>
    
    <content type="html"><![CDATA[<p>I summary this article after I finished installation of Homebrew on my 2 laptops-MacBook Pro(Interl Chip) &amp; MacBook Air(Apple Silicone Chip), there is nothing wrong with running the command below. Just record it for reference and hope it could help someone else.</p><h2 id="Installation-of-Homebrew"><a href="#Installation-of-Homebrew" class="headerlink" title="Installation of Homebrew"></a>Installation of Homebrew</h2><p>Execute the command as below, the source is from China mainland so we don’t need to worry too much about the bad Internet connection.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/bin/zsh -c &quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;<br></code></pre></td></tr></table></figure><p>After the tip of your terminal notified that installation is finished.Restart or reload your terminal by below command</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">source /Users/hyk/.zprofile<br></code></pre></td></tr></table></figure><hr><p>Here is the logs for reference.</p><p><img src="logOfHomebrew.png" alt="Logs Of Homebrew Installation"></p><p>Per logs , we can see it may need to configure git therefor follow the tips directly like below</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">add those below to git config</span><br>git config --global --add safe.directory /opt/homebrew/Library/Taps/homebrew/homebrew-core<br><br>git config --global --add safe.directory /opt/homebrew/Library/Taps/homebrew/homebrew-cask<br></code></pre></td></tr></table></figure><p>After run all above, we have finished the installation of Homebrew.We can install some developed tools by related command.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">to see all commands</span><br>brew commands<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">see the version of Homebrew</span><br>brew -v<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">see the volume of Homebrew</span><br>brew info<br></code></pre></td></tr></table></figure><hr><h2 id="Installation-Of-MySQL-5-7"><a href="#Installation-Of-MySQL-5-7" class="headerlink" title="Installation Of MySQL-5.7"></a>Installation Of MySQL-5.7</h2><p>We could install MySQL by Homebrew easily.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">search mysql</span><br>brew search mysql<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">instal mysql</span><br>brew install mysql@5.7<br></code></pre></td></tr></table></figure><p>MySQL logs for reference.</p><p><img src="logsOfMySQL.png" alt="Logs Of MySQL Installation"></p><p>After finished installation of MySQL,execute those commands as below</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">echo</span> the PATH to ~/.zshrc</span><br>echo &#x27;export PATH=&quot;/opt/homebrew/opt/mysql@5.7/bin:$PATH&quot;&#x27; &gt;&gt; ~/.zshrc<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">reload the file to make the PATH into effect</span><br>source ~/.zshrc<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">restart mysql</span><br>brew services restart mysql@5.7<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-keyword">then</span> we can reset the password</span><br>mysql_secure_installation<br></code></pre></td></tr></table></figure><p>Initialize password of MySQL</p><p><img src="1e9f2ea1-d72e-4e1b-be26-eb33d2bf7ab6.png" alt="Initialize Password Of MySQL"></p><p>At this point, we have completed installation of MySQL-5.7</p><hr><h2 id="Installation-Of-Redis"><a href="#Installation-Of-Redis" class="headerlink" title="Installation Of Redis"></a>Installation Of Redis</h2><p>Redis is convenient to use on MacOS, plus, it’s easy to get it by Homebrew.Let just go ahead~</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">search redis</span><br>brew search redis<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-keyword">in</span> fact , sometimes you can just skip the search process</span><br>brew install redis<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">after restart reids ,we can use it</span><br>brew services restart redis<br></code></pre></td></tr></table></figure><p><img src="connectToLocalRedis.png" alt="Connect To Local Redis"></p>]]></content>
    
    
    <categories>
      
      <category>DevTools</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MacOS</tag>
      
      <tag>Installation</tag>
      
      <tag>Homebrew</tag>
      
      <tag>MySQL</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>How To Build This Blog On Github</title>
    <link href="/2022/11/04/HowToBuildThisBlogOnGithub/"/>
    <url>/2022/11/04/HowToBuildThisBlogOnGithub/</url>
    
    <content type="html"><![CDATA[<p>Some dudes may ask me how to build such a simple blog like this site with github domain.</p><p>Here I am going to share the details step by step,and hope it is useful to someone.</p><h2 id="Sign-Up-Your-Github-Account"><a href="#Sign-Up-Your-Github-Account" class="headerlink" title="Sign Up Your Github Account"></a>Sign Up Your Github Account</h2><p>Go to <a href="https://github.com/">Github</a> to register your own account.It should be easiest thing to do I believe!</p><hr><h2 id="Create-A-Repository"><a href="#Create-A-Repository" class="headerlink" title="Create A Repository"></a>Create A Repository</h2><p>Create a repository named as  <strong>userName</strong><strong>.github.io.</strong> Noted that <strong>userName</strong> <strong>must</strong> be same as your user name of Github.</p><p><img src="createRepository.png" alt="Create A Repository"></p><hr><h2 id="Install-Node-js-On-Your-Laptop"><a href="#Install-Node-js-On-Your-Laptop" class="headerlink" title="Install Node.js On Your Laptop"></a>Install Node.js On Your Laptop</h2><p>It may be different for various system.Here I just demonstrate how to install it on my Macbook Air.You can just click <a href="https://iceswear.github.io/2022/11/04/InstallationOfNode-JSOnMacOS/">Installation Of Node.js On MacOS</a> for reference.</p><hr><h2 id="Installation-Of-Hexo"><a href="#Installation-Of-Hexo" class="headerlink" title="Installation Of Hexo"></a>Installation Of Hexo</h2><p>Follow the command to install hexo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>See version of hexo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo -v<br></code></pre></td></tr></table></figure><p>After installation is finished, initilize a blog module  hexo-blog .</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo init hexo-blog<br></code></pre></td></tr></table></figure><p>Then enter the module to run npm</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd hexo-blog<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-keyword">then</span> build npm</span><br>npm install<br></code></pre></td></tr></table></figure><p>Now, you can start the blog at your local enviroment and just visit <a href="http://localhost:4000/">http://localhost:4000</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo g<br>hexo server<br></code></pre></td></tr></table></figure><hr><h2 id="Change-A-Better-Theme-Fuild"><a href="#Change-A-Better-Theme-Fuild" class="headerlink" title="Change A Better Theme-Fuild"></a>Change A Better Theme-Fuild</h2><p>As the original theme of Hexo is too simple, we could use a better theme.Here I will choose <strong>Fuild.</strong></p><ol><li>Download the latest package from <a href="https://github.com/fluid-dev/hexo-theme-fluid/releases">https://github.com/fluid-dev/hexo-theme-fluid/releases</a> .Unzip the package at the root of theme and rename file as fluid.</li></ol><p><img src="renameAsFluid.png" alt="Rename As Fluid"></p><ol start="2"><li>Configure _config.yml of hexo-blog to set theme and language.</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">theme: fluid  # appointed theme<br>language: zh-CN  <br><span class="hljs-meta prompt_"># </span><span class="language-bash">use zh-CN <span class="hljs-keyword">if</span> you would like to use Chinese,or use en as default language</span><br></code></pre></td></tr></table></figure><p><em>For more configurations, you can visit</em> <a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/README_en.md"><em>Fluid</em></a> <em>to learn.</em></p><hr><h2 id="Push-On-Github-Pages"><a href="#Push-On-Github-Pages" class="headerlink" title="Push On Github Pages"></a>Push On Github Pages</h2><p><strong>Method 1</strong></p><p>Install hexo-deployer-git</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>Modify  _config.yml of hexo and account of GitHub</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">deploy:<br>  type: git<br>  repo: https://github.com/xxx/xxx.github.io.git<br>  branch: main<br>  token: ghp_3K*******************<br></code></pre></td></tr></table></figure><p>Finally,depoly to Github</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo g -d<br></code></pre></td></tr></table></figure><hr><p><strong>Method 2</strong></p><p>Directly push files of public to main branch of GitHub .</p><p><img src="pushPublicToGithub.png" alt="Push Public To Github"></p><hr><p><strong>Method 3</strong></p><p>Publish blog to your own Linux server and use Nginx to proxy.</p><ol><li>Edit   _config.yml of hexo-blog to add this path—this path should be same as location /blog of Nginx .</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">root: /blog<br></code></pre></td></tr></table></figure><ol start="2"><li>run packaging command at the root of hexo-blog ,the generated files will be saved into public  directory.</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo g<br></code></pre></td></tr></table></figure><ol start="3"><li>Copy these files to Linux server somewhere you would like to place.</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">Noted that it<span class="hljs-string">&#x27;s up to you to choose where to save</span></span><br><br>/opt/spike/fronted/hexo-blog<br></code></pre></td></tr></table></figure><ol start="4"><li>Modify <strong>conf</strong> of Nginx .</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">Noted that it may be different on your server</span><br>cd /usr/local/nginx/conf <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">edit nginx.conf</span><br>vim nginx.conf  <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">add this configuration on your server</span><br>location /blog &#123;<br>    alias  /opt/spike/fronted/hexo-blog;<br>    index  index.html index.htm;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="5"><li>Restart Nginx .</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /usr/local/nginx/sbin<br>./nginx -s reload<br></code></pre></td></tr></table></figure><ol start="6"><li>Finally, you can visit your blog via  ip address of your server.</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">visit your blogs</span><br>http://xx.xx.xx.xx/blog/<br></code></pre></td></tr></table></figure><hr><h2 id="Blogs-Display"><a href="#Blogs-Display" class="headerlink" title="Blogs Display"></a>Blogs Display</h2><p>Well Done Man!!</p><p>Just visit <a href="https://iceswear.github.io/">iceswear.github.io</a> to enjoy your own blogs~~</p>]]></content>
    
    
    <categories>
      
      <category>Front-End</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node.js</tag>
      
      <tag>Hexo</tag>
      
      <tag>Github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Installation Of Node.js On MacOS</title>
    <link href="/2022/11/04/InstallationOfNodejsOnMacOS/"/>
    <url>/2022/11/04/InstallationOfNodejsOnMacOS/</url>
    
    <content type="html"><![CDATA[<p>Regarding a new mac, oftentime it needs node to develope.We can use <strong>Homebrew</strong> command to install Node.js , or we may be able to directly visit the official  Web to download appointed packages to conduct the installation.</p><p>Here I’ll demonstrate how to use package to install.</p><p>Go to <a href="https://nodejs.org/en/download/">Node.js</a> to select a suitable version to use. To me, choosing LTS(long-term-support) version is a nice proposal here.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">https://nodejs.org/en/download/<br></code></pre></td></tr></table></figure><p><img src="download-nodeJS.jpeg" alt="Download pkg of Node.js"></p><p>Just follow the tips of installation step by step then you can finish it.</p><p>Here are some commands to check the version of node.js</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">check version</span><br>npm -v<br>node -v<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">see the registry addr</span><br>npm config get registry<br><span class="hljs-meta prompt_">#</span><span class="language-bash">https://registry.npm.taobao.org/ it seems that the url was expired..</span><br></code></pre></td></tr></table></figure><p>Change sources of dependencies.Noted that nrm(npm registry manager) is a tool of registry management.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g nrm<br></code></pre></td></tr></table></figure><p>Here you may meet the issue as below sometimes.</p><p><img src="issues-installation-of-nodeJS.jpeg" alt="Issue was met"></p><p>A solution for reference.</p><p><a href="https://blog.csdn.net/qq_39132095/article/details/125568802">https://blog.csdn.net/qq_39132095/article/details/125568802</a></p><hr><p>Final solution works to my macbook air(m2 chip) as below.</p><ol><li>Create ~/.npm-global file.</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir ~/.npm-global<br></code></pre></td></tr></table></figure><ol start="2"><li>Open and edit ~/.zshrc file.</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim ~/.zshrc<br></code></pre></td></tr></table></figure><ol start="3"><li>Add below to ~/.zshrc and save it with ‘x’.</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">export PATH=~/.npm-global/bin:$PATH<br></code></pre></td></tr></table></figure><ol start="4"><li>Reload ~/.zshrc to make it into effect.</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">source ~/.zshrc<br></code></pre></td></tr></table></figure><ol start="5"><li>Continue to execute the installation command again.</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g nrm<br></code></pre></td></tr></table></figure><hr><p>After installation of nrm, we can see the source we are currently using.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">nrm ls<br>// * represents being used<br><br>* npm -------- https://registry.npmjs.org/       <br>  yarn ------- https://registry.yarnpkg.com/     <br>  cnpm ------- http://r.cnpmjs.org/<br>  taobao ----- https://registry.npm.taobao.org/  <br>  nj --------- https://registry.nodejitsu.com/   <br>  npmMirror -- https://skimdb.npmjs.com/registry/<br>  edunpm ----- http://registry.enpmjs.org/ <br></code></pre></td></tr></table></figure><p>To change the registry by following the command.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nrm use taobao    //change<br></code></pre></td></tr></table></figure><p>In the end of this article,I have to say “<strong>Guys,WELL DONE!!!!</strong>“.We have already finished the installation of node.js at a macbook air with ARM64 chip.</p><p><img src="CheckVersionOfNodejs.png" alt="Version Of Node.js"></p>]]></content>
    
    
    <categories>
      
      <category>Node.js</category>
      
      <category>DevTools</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node.js</tag>
      
      <tag>MacOS</tag>
      
      <tag>Installation</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
